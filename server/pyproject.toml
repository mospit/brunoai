[tool.poetry]
name = "bruno-ai-server"
version = "0.1.0"
description = "Bruno AI Server - FastAPI backend"
authors = ["Bruno AI Team"]
readme = "README.md"
packages = [{include = "bruno_ai_server"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.6"
uvicorn = {extras = ["standard"], version = "^0.32.1"}
sqlalchemy = "^2.0.36"
sqlalchemy-utils = "^0.41.2"
asyncpg = "^0.30.0"
psycopg2-binary = "^2.9.7"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
pydantic-settings = "^2.7.0"
alembic = "^1.14.0"
email-validator = "^2.1.0"
# Voice processing and AI
httpx = "^0.28.1"
python-multipart = "^0.0.9"
speechtranscription = "^1.0.0"
requests = "^2.32.3"
aiofiles = "^24.1.0"
firebase-admin = "^6.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.25.0"
pytest-cov = "^4.0.0"
httpx = "^0.28.1"
pre-commit = "^3.6.0"
black = "^24.3.0"
isort = "^5.13.2"
ruff = "^0.3.4"
flake8 = "^7.0.0"
# Additional testing dependencies
aiosqlite = "^0.19.0"  # For in-memory SQLite testing
factory-boy = "^3.3.0"  # For test data factories
faker = "^26.0.0"  # For generating fake test data
responses = "^0.24.1"  # For mocking HTTP requests

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by a single or double quote.
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise from None
    "E402",  # module level import not at top
    "F841",  # local variable assigned but never used
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["E402", "F841"]
"tests/*.py" = ["E402", "F841"]
"alembic/versions/*.py" = ["W291"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
max-complexity = 10
per-file-ignores = [
    "__init__.py:F401",
]
