openapi: 3.0.0
info:
  title: Bruno AI Authentication API
  description: Authentication endpoints for Bruno AI application
  version: 1.0.0
  contact:
    name: Bruno AI Team
    email: support@brunoai.app

servers:
  - url: https://api.brunoai.app/v1
    description: Production server
  - url: http://localhost:8000
    description: Development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with email and password
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              valid_registration:
                summary: Valid user registration
                value:
                  email: "user@example.com"
                  password: "SecurePassword123!"
                  full_name: "John Doe"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                successful_registration:
                  summary: Successful registration response
                  value:
                    id: "550e8400-e29b-41d4-a716-446655440000"
                    email: "user@example.com"
                    full_name: "John Doe"
                    is_active: true
                    is_verified: false
                    created_at: "2024-01-15T10:30:00Z"
        '400':
          description: Bad Request - Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                email_exists:
                  summary: Email already registered
                  value:
                    error: "validation_error"
                    message: "Email already registered"
                    details: null
                invalid_password:
                  summary: Invalid password format
                  value:
                    error: "validation_error"
                    message: "Password must be at least 8 characters long"
                    details: null
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns JWT tokens
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            examples:
              valid_login:
                summary: Valid login credentials
                value:
                  email: "user@example.com"
                  password: "SecurePassword123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                successful_login:
                  summary: Successful login response
                  value:
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    token_type: "bearer"
                    expires_in: 900
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    error: "authentication_error"
                    message: "Incorrect email or password"
                    details: null
        '400':
          description: Bad Request - Account inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                inactive_user:
                  summary: User account is inactive
                  value:
                    error: "account_error"
                    message: "Inactive user"
                    details: null

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generate a new access token using a valid refresh token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              valid_refresh:
                summary: Valid refresh token
                value:
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
              examples:
                successful_refresh:
                  summary: New access token generated
                  value:
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    token_type: "bearer"
                    expires_in: 900
        '401':
          description: Unauthorized - Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_refresh_token:
                  summary: Invalid refresh token
                  value:
                    error: "authentication_error"
                    message: "Invalid or expired refresh token"
                    details: null

  /auth/me:
    get:
      summary: Get current user information
      description: Returns information about the currently authenticated user
      operationId: getCurrentUser
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - email
        - password
        - full_name
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          description: User's password (minimum 8 characters)
          example: "SecurePassword123!"
        full_name:
          type: string
          minLength: 1
          maxLength: 100
          description: User's full name
          example: "John Doe"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          description: User's password
          example: "SecurePassword123!"

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Valid refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User's unique identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        full_name:
          type: string
          description: User's full name
          example: "John Doe"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        is_verified:
          type: boolean
          description: Whether the user's email is verified
          example: false
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last account update timestamp
          example: "2024-01-15T10:30:00Z"

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "bearer"
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 900

    AccessTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: New JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "bearer"
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 900

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type identifier
          example: "authentication_error"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid credentials provided"
        details:
          oneOf:
            - type: "null"
            - type: object
            - type: array
          description: Additional error details (optional)
          example: null

    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type identifier
          example: "validation_error"
        message:
          type: string
          description: Human-readable error message
          example: "Validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name that failed validation
                example: "email"
              message:
                type: string
                description: Validation error message
                example: "Invalid email format"
          example:
            - field: "email"
              message: "Invalid email format"
            - field: "password"
              message: "Password must be at least 8 characters"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token authentication

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "authentication_error"
            message: "Invalid or missing authentication token"
            details: null

    ValidationError:
      description: Input validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

tags:
  - name: Authentication
    description: User authentication and authorization operations
