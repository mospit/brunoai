// Mocks generated by Mockito 5.4.6 from annotations
// in client/test/mocks/pantry_service_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i13;

import 'package:client/features/pantry/models/pantry_category.dart' as _i9;
import 'package:client/features/pantry/models/pantry_item.dart' as _i2;
import 'package:client/features/pantry/services/pantry_service.dart' as _i6;
import 'package:client/services/category_service.dart' as _i8;
import 'package:client/services/offline_storage_service.dart' as _i10;
import 'package:client/services/sync_service.dart' as _i4;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePantryItem_0 extends _i1.SmartFake implements _i2.PantryItem {
  _FakePantryItem_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSyncResult_2 extends _i1.SmartFake implements _i4.SyncResult {
  _FakeSyncResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSyncStatus_3 extends _i1.SmartFake implements _i4.SyncStatus {
  _FakeSyncStatus_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_4 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PantryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPantryService extends _i1.Mock implements _i6.PantryService {
  MockPantryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i2.PantryItem>> getPantryItems() =>
      (super.noSuchMethod(
            Invocation.method(#getPantryItems, []),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<_i2.PantryItem> addPantryItem(_i2.PantryItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#addPantryItem, [item]),
            returnValue: _i7.Future<_i2.PantryItem>.value(
              _FakePantryItem_0(
                this,
                Invocation.method(#addPantryItem, [item]),
              ),
            ),
          )
          as _i7.Future<_i2.PantryItem>);

  @override
  _i7.Future<_i2.PantryItem> updatePantryItem(_i2.PantryItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#updatePantryItem, [item]),
            returnValue: _i7.Future<_i2.PantryItem>.value(
              _FakePantryItem_0(
                this,
                Invocation.method(#updatePantryItem, [item]),
              ),
            ),
          )
          as _i7.Future<_i2.PantryItem>);

  @override
  _i7.Future<bool> deletePantryItem(int? itemId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePantryItem, [itemId]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<_i2.PantryItem?> getPantryItem(int? itemId) =>
      (super.noSuchMethod(
            Invocation.method(#getPantryItem, [itemId]),
            returnValue: _i7.Future<_i2.PantryItem?>.value(),
          )
          as _i7.Future<_i2.PantryItem?>);

  @override
  _i7.Future<List<_i2.PantryItem>> searchPantryItems(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchPantryItems, [query]),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> getPantryItemsFiltered({
    int? categoryId,
    String? categoryName,
    String? search,
    String? expirationStatus,
    String? sortBy,
    String? sortOrder,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPantryItemsFiltered, [], {
              #categoryId: categoryId,
              #categoryName: categoryName,
              #search: search,
              #expirationStatus: expirationStatus,
              #sortBy: sortBy,
              #sortOrder: sortOrder,
            }),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> getPantryItemsByCategory(int? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getPantryItemsByCategory, [categoryId]),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> getExpiredItems() =>
      (super.noSuchMethod(
            Invocation.method(#getExpiredItems, []),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> getExpiringSoonItems() =>
      (super.noSuchMethod(
            Invocation.method(#getExpiringSoonItems, []),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> getFreshItems() =>
      (super.noSuchMethod(
            Invocation.method(#getFreshItems, []),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<_i2.PantryItem> incrementQuantity(
    int? itemId, {
    double? amount = 1.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#incrementQuantity, [itemId], {#amount: amount}),
            returnValue: _i7.Future<_i2.PantryItem>.value(
              _FakePantryItem_0(
                this,
                Invocation.method(
                  #incrementQuantity,
                  [itemId],
                  {#amount: amount},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.PantryItem>);

  @override
  _i7.Future<_i2.PantryItem> decrementQuantity(
    int? itemId, {
    double? amount = 1.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#decrementQuantity, [itemId], {#amount: amount}),
            returnValue: _i7.Future<_i2.PantryItem>.value(
              _FakePantryItem_0(
                this,
                Invocation.method(
                  #decrementQuantity,
                  [itemId],
                  {#amount: amount},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.PantryItem>);

  @override
  _i7.Future<_i2.PantryItem> setQuantity(int? itemId, double? quantity) =>
      (super.noSuchMethod(
            Invocation.method(#setQuantity, [itemId, quantity]),
            returnValue: _i7.Future<_i2.PantryItem>.value(
              _FakePantryItem_0(
                this,
                Invocation.method(#setQuantity, [itemId, quantity]),
              ),
            ),
          )
          as _i7.Future<_i2.PantryItem>);
}

/// A class which mocks [CategoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryService extends _i1.Mock implements _i8.CategoryService {
  MockCategoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i9.PantryCategory>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i7.Future<List<_i9.PantryCategory>>.value(
              <_i9.PantryCategory>[],
            ),
          )
          as _i7.Future<List<_i9.PantryCategory>>);

  @override
  _i7.Future<_i9.PantryCategory?> getCategory(int? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getCategory, [categoryId]),
            returnValue: _i7.Future<_i9.PantryCategory?>.value(),
          )
          as _i7.Future<_i9.PantryCategory?>);

  @override
  _i7.Future<List<_i9.PantryCategory>> searchCategories(String? searchTerm) =>
      (super.noSuchMethod(
            Invocation.method(#searchCategories, [searchTerm]),
            returnValue: _i7.Future<List<_i9.PantryCategory>>.value(
              <_i9.PantryCategory>[],
            ),
          )
          as _i7.Future<List<_i9.PantryCategory>>);

  @override
  _i7.Future<Map<_i9.PantryCategory, int>> getCategoriesWithCount() =>
      (super.noSuchMethod(
            Invocation.method(#getCategoriesWithCount, []),
            returnValue: _i7.Future<Map<_i9.PantryCategory, int>>.value(
              <_i9.PantryCategory, int>{},
            ),
          )
          as _i7.Future<Map<_i9.PantryCategory, int>>);
}

/// A class which mocks [OfflineStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineStorageService extends _i1.Mock
    implements _i10.OfflineStorageService {
  MockOfflineStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i7.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.getter(#database)),
            ),
          )
          as _i7.Future<_i3.Database>);

  @override
  _i7.Future<List<_i2.PantryItem>> getAllPantryItems() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPantryItems, []),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> getPantryItemsByCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getPantryItemsByCategory, [category]),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<List<_i2.PantryItem>> searchPantryItems(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchPantryItems, [query]),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<void> insertOrUpdatePantryItem(
    _i2.PantryItem? item, {
    bool? markAsSynced = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #insertOrUpdatePantryItem,
              [item],
              {#markAsSynced: markAsSynced},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deletePantryItem(int? id, String? localId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePantryItem, [id, localId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> addPendingOperation(
    String? operationType, {
    int? itemId,
    String? localId,
    _i2.PantryItem? item,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addPendingOperation,
              [operationType],
              {#itemId: itemId, #localId: localId, #item: item},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getPendingOperations() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingOperations, []),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<void> clearPendingOperations() =>
      (super.noSuchMethod(
            Invocation.method(#clearPendingOperations, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.PantryItem>> getUnsyncedItems() =>
      (super.noSuchMethod(
            Invocation.method(#getUnsyncedItems, []),
            returnValue: _i7.Future<List<_i2.PantryItem>>.value(
              <_i2.PantryItem>[],
            ),
          )
          as _i7.Future<List<_i2.PantryItem>>);

  @override
  _i7.Future<void> markItemsAsSynced(List<int>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#markItemsAsSynced, [ids]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> bulkInsertPantryItems(
    List<_i2.PantryItem>? items, {
    bool? markAsSynced = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #bulkInsertPantryItems,
              [items],
              {#markAsSynced: markAsSynced},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i4.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> get isOnline =>
      (super.noSuchMethod(
            Invocation.getter(#isOnline),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  bool get isSyncing =>
      (super.noSuchMethod(Invocation.getter(#isSyncing), returnValue: false)
          as bool);

  @override
  void initialize(_i6.PantryService? pantryService) => super.noSuchMethod(
    Invocation.method(#initialize, [pantryService]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<_i4.SyncResult> syncWithServer(_i6.PantryService? pantryService) =>
      (super.noSuchMethod(
            Invocation.method(#syncWithServer, [pantryService]),
            returnValue: _i7.Future<_i4.SyncResult>.value(
              _FakeSyncResult_2(
                this,
                Invocation.method(#syncWithServer, [pantryService]),
              ),
            ),
          )
          as _i7.Future<_i4.SyncResult>);

  @override
  _i7.Future<_i4.SyncStatus> getSyncStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getSyncStatus, []),
            returnValue: _i7.Future<_i4.SyncStatus>.value(
              _FakeSyncStatus_3(this, Invocation.method(#getSyncStatus, [])),
            ),
          )
          as _i7.Future<_i4.SyncStatus>);

  @override
  _i7.Future<_i4.SyncResult> forceFullSync(_i6.PantryService? pantryService) =>
      (super.noSuchMethod(
            Invocation.method(#forceFullSync, [pantryService]),
            returnValue: _i7.Future<_i4.SyncResult>.value(
              _FakeSyncResult_2(
                this,
                Invocation.method(#forceFullSync, [pantryService]),
              ),
            ),
          )
          as _i7.Future<_i4.SyncResult>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i7.Future<_i5.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i7.Future<_i5.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i5.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i5.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i5.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i5.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i7.Future<String>.value(
              _i12.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<_i13.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i7.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
          )
          as _i7.Future<_i13.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i7.Future<_i5.StreamedResponse>.value(
              _FakeStreamedResponse_5(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
